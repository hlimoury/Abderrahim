<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Modifier <%= reportData.title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    .editable-section {
      padding: 0.5rem;
      border: 1px dashed #0d6efd;
      border-radius: 0.25rem;
      background-color: #f8f9fa;
      cursor: text;
    }
    .editable-section:focus {
      outline: 2px solid #0d6efd;
      background-color: white;
    }
    .edit-buttons {
      position: sticky;
      top: 20px;
      z-index: 1000;
      background: white;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .editable-value {
      display: inline-block;
      min-width: 30px;
    }
  </style>
</head>
<body class="container mt-4">
  <!-- Edit Mode Actions -->
  <div class="edit-buttons no-print">
    <button class="btn btn-success" id="saveReportBtn"><i class="bi bi-check-lg"></i> Sauvegarder</button>
    <a href="/reports" class="btn btn-danger"><i class="bi bi-x-lg"></i> Annuler</a>
  </div>

  <h1 contenteditable="true" class="editable-section" data-field="title"><%= reportData.title %></h1>
  <p>Dernière modification : <%= formatDate(new Date()) %></p>

  <div id="editableContent">
    <% reportData.sections.forEach((section, secIdx) => { %>
      <div class="mb-5">
        <div class="section-header">
          <h3 class="editable-section" data-field="sections[<%= secIdx %>].title" contenteditable="true">
            <%= section.title %>
          </h3>
        </div>
        <% if (section.summary) { %>
          <% if (Array.isArray(section.summary)) { %>
            <div class="card summary-card mb-4">
              <div class="card-header">Résumé</div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-bordered">
                    <thead>
                      <tr>
                        <% Object.keys(section.summary[0]).forEach(header => { %>
                          <th><%= header %></th>
                        <% }); %>
                      </tr>
                    </thead>
                    <tbody>
                      <% section.summary.forEach(row => { %>
                        <tr>
                          <% Object.values(row).forEach(val => { %>
                            <td><%= val %></td>
                          <% }); %>
                        </tr>
                      <% }); %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          <% } else { %>
            <div class="card summary-card mb-4">
              <div class="card-header">Résumé</div>
              <div class="card-body">
                <div class="row">
                  <% Object.entries(section.summary)
                       .filter(([key]) => !['id', '_id', 'Description'].includes(key))
                       .forEach(([key, value]) => { %>
                    <div class="col-md-3 mb-3">
                      <span class="fw-bold"><%= key %>:</span>
                      <span class="text-primary"><%= value %></span>
                    </div>
                  <% }); %>
                </div>
              </div>
            </div>
          <% } %>
        <% } %>
        <% if (section.details && section.details.length > 0) { %>
          <div class="card">
            <div class="card-header">Détails</div>
            <div class="card-body table-responsive">
              <table class="table table-striped table-hover">
                <thead class="table-primary">
                  <tr>
                    <% Object.keys(section.details[0])
                         .filter(key => !['id', '_id', 'Description'].includes(key))
                         .forEach(header => { %>
                      <th><%= header %></th>
                    <% }); %>
                  </tr>
                </thead>
                <tbody>
                  <% section.details.forEach((detail, dIdx) => { %>
                    <tr>
                      <% Object.entries(detail)
                           .filter(([key]) => !['id', '_id', 'Description'].includes(key))
                           .forEach(([key, val]) => { %>
                        <td class="editable-section" data-field="sections[<%= secIdx %>].details[<%= dIdx %>].<%= key %>" contenteditable="true">
                          <%= val %>
                        </td>
                      <% }); %>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </div>
        <% } %>
      </div>
    <% }); %>
  </div>

  <form id="saveForm" action="/reports/save" method="POST">
    <input type="hidden" name="editedReport" id="editedReportInput">
  </form>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let reportData = <%- JSON.stringify(reportData) %>;
    function getNestedValue(obj, path) {
      return path.split(/[\[\].]+/).filter(p => p)
          .reduce((acc, part) => acc && acc[part], obj);
    }
    function setNestedValue(obj, path, value) {
      const parts = path.split(/[\[\].]+/).filter(p => p);
      let current = obj;
      for (let i = 0; i < parts.length - 1; i++) {
        const part = parts[i];
        current[part] = current[part] || {};
        current = current[part];
      }
      current[parts[parts.length - 1]] = value;
      return obj;
    }
    document.getElementById('saveReportBtn').addEventListener('click', () => {
      try {
        document.querySelectorAll('[contenteditable="true"]').forEach(element => {
          const fieldPath = element.dataset.field;
          if (!fieldPath) return;
          const dataType = element.dataset.type || 'string';
          let value = element.textContent.trim();
          if (dataType === 'number') {
            const numericValue = Number(value);
            if (isNaN(numericValue)) {
              element.style.backgroundColor = "#ffdddd";
              throw new Error(`Valeur numérique invalide pour ${fieldPath}`);
            }
            value = numericValue;
          }
          setNestedValue(reportData, fieldPath, value);
        });
        document.getElementById('editedReportInput').value = JSON.stringify(reportData);
        document.getElementById('saveForm').submit();
        const saveBtn = document.getElementById('saveReportBtn');
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> Sauvegarde...';
      } catch (error) {
        alert(error.message);
      }
    });
  </script>
</body>
</html>
